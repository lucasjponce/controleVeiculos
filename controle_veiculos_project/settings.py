"""
Django settings for controle_veiculos_project project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
#importação para rodar local
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = ''
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "chave-provisoria")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = False
# alteração no debug para rodar o sistema local e online
DEBUG = os.environ.get("DEBUG", "False") == "True"

ALLOWED_HOSTS = ['*', '.onrender.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

ROOT_URLCONF = 'controle_veiculos_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'controle_veiculos_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.mysql',
#        'NAME': 'controleVeiculos',
#        'USER': 'lucas',
#        'PASSWORD': '1234',
#        'HOST': 'localhost',
#        'PORT': '3306',
#    }
#}

#  Banco de dados (Aiven MySQL)
#DATABASES = {
#    "default": {
#        "ENGINE": "django.db.backends.mysql",
#        "NAME": os.environ.get("MYSQL_DB", "controleacessospi"),
#        "USER": os.environ.get("MYSQL_USER", "avnadmin"),
#        "PASSWORD": os.environ.get("MYSQL_PASSWORD", "senha_provisoria"),
#        "HOST": os.environ.get("MYSQL_HOST", "controleacessospi-mayza942-d355.d.aivencloud.com"),
#        "PORT": os.environ.get("MYSQL_PORT", "26965"),
#        "OPTIONS": {
#            #"ssl": {"ca": "/etc/ssl/certs/ca-certificates.crt"},
#            "ssl": {"cert_reqs": 0},
#        },
#    }
#}

#  Banco de dados (Aiven MySQL + render)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get("MYSQL_DB", "controleacessospi"),
        "USER": os.environ.get("MYSQL_USER", "avnadmin"),
        "PASSWORD": os.environ.get("MYSQL_PASSWORD", "senha_provisoria"),
        "HOST": os.environ.get("MYSQL_HOST", "controleacessospi-mayza942-d355.d.aivencloud.com"),
        "PORT": os.environ.get("MYSQL_PORT", "26965"),
        "OPTIONS": {
            #"ssl": {"ca": "/etc/ssl/certs/ca-certificates.crt"},
            "ssl": {"cert_reqs": 0},
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

# teste para evitar o warning no Render: só adiciona STATICFILES_DIRS se a pasta existir localmente
_extra_static = BASE_DIR / "static"
if _extra_static.exists():
    STATICFILES_DIRS = [_extra_static]
else:
    STATICFILES_DIRS = []

# Quando rodar collectstatic, os arquivos vão para uma pasta que o Render serve
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#Modelo Customizado:
#Se estiver utilizando um modelo de usuário customizado (por exemplo, com cpf como identificador), defina em seu settings.py:

AUTH_USER_MODEL = 'core.Usuario'
